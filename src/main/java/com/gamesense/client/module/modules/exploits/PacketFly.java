package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.events.PacketEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.DoubleSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.misc.MessageBus;
import com.gamesense.api.util.player.PhaseUtil;
import com.gamesense.api.util.world.MotionUtil;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;

@Module.Declaration(name = "PacketFly", category = Category.Exploits)
public class PacketFly extends Module {

    DoubleSetting speed = registerDouble("Speed", 1, 0, 5);
    DoubleSetting ySpeed = registerDouble("Y Speed", 1, 0, 5);
    ModeSetting bounds = registerMode("Bounds", PhaseUtil.bound, "Forward");
    BooleanSetting desync = registerBoolean("Desync", false);
    BooleanSetting antikick = registerBoolean("AntiKick", true);
    IntegerSetting antiKickSpeed = registerInteger("AntiKick Frequency", 6, 1, 16);
    BooleanSetting antiRotate = registerBoolean("AntiRotatePacket", false);
    BooleanSetting confirm = registerBoolean("Confirm IDs", false);
    BooleanSetting debug = registerBoolean("Debug IDs", false);

    int tpid;

    @SuppressWarnings("Unused")
    @EventHandler
    private final Listener<PacketEvent.Send> sendListener = new Listener<>(event -> {

        /* TPID HANDLING */
        if ((event.getPacket() instanceof CPacketPlayer.Position) || (event.getPacket() instanceof CPacketPlayer.PositionRotation))
            tpid++;

        if (event.getPacket() instanceof CPacketPlayer.Rotation || event.getPacket() instanceof CPacketPlayer.PositionRotation
                && antiRotate.getValue()) {

            if (event.getPacket() instanceof CPacketPlayer.PositionRotation) {
                CPacketPlayer e = (CPacketPlayer) event.getPacket();
                mc.player.connection.sendPacket(new CPacketPlayer.Position(e.x, e.y, e.z, e.onGround));
            }

            event.cancel();

        }

    });

    @SuppressWarnings("Unused")
    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener = new Listener<>(event -> {

        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            if (confirm.getValue() && debug.getValue())
                MessageBus.sendClientPrefixMessageWithID(tpid - ((SPacketPlayerPosLook) event.getPacket()).teleportId + "", 69420);
            tpid = ((SPacketPlayerPosLook) event.getPacket()).teleportId;

            ((SPacketPlayerPosLook) event.getPacket()).yaw = mc.player.rotationYaw;
            ((SPacketPlayerPosLook) event.getPacket()).pitch = mc.player.rotationPitch;

            if (desync.getValue() && !(mc.player.ticksExisted % 8 == 0))
                event.cancel();


        }

    });

    @Override
    public void onUpdate() {

        double[] dir = MotionUtil.forward(1);

        mc.player.setVelocity(0,0,0);

        if (antikick.getValue()) {
            mc.player.motionY = mc.player.ticksExisted % antiKickSpeed.getValue() == 0 && !mc.player.onGround ? 0.01 : 0;

            if (!MotionUtil.isMoving(mc.player))
                mc.player.motionY = mc.player.ticksExisted % antiKickSpeed.getValue() == 1 && !mc.player.onGround ? 0.01 : 0;
        }

        // so we still do antikick
        if (!(mc.player.ticksExisted % antiKickSpeed.getValue() == 0) && mc.gameSettings.keyBindJump.isKeyDown())
            mc.player.motionY = 0.0624 * ySpeed.getValue();

        if (mc.gameSettings.keyBindSneak.isKeyDown())
            mc.player.motionY = -(0.0624 * ySpeed.getValue());

        mc.player.motionX = dir[0] * 0.0624 * speed.getValue();
        mc.player.motionZ = dir[1] * 0.0624 * speed.getValue();

        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + mc.player.motionX, mc.player.posY + mc.player.motionY, mc.player.posZ + mc.player.motionZ, false));
        PhaseUtil.doBounds(bounds.getValue());

        if (confirm.getValue()) {
            mc.player.connection.sendPacket(new CPacketConfirmTeleport(tpid - 1));
            mc.player.connection.sendPacket(new CPacketConfirmTeleport(tpid));
            mc.player.connection.sendPacket(new CPacketConfirmTeleport(tpid + 1));
        }


    }
}
