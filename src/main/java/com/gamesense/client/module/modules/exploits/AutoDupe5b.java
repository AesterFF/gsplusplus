package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.Phase;
import com.gamesense.api.event.events.OnUpdateWalkingPlayerEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.player.InventoryUtil;
import com.gamesense.api.util.player.PlacementUtil;
import com.gamesense.api.util.player.PlayerPacket;
import com.gamesense.api.util.player.RotationUtil;
import com.gamesense.api.util.world.BlockUtil;
import com.gamesense.client.manager.managers.PlayerPacketManager;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import com.gamesense.client.module.modules.combat.AntiCrystal;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockHopper;
import net.minecraft.block.BlockObsidian;
import net.minecraft.block.BlockShulkerBox;
import net.minecraft.client.gui.inventory.GuiCrafting;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.network.play.client.*;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec2f;
import net.minecraft.util.math.Vec3d;
import scala.actors.threadpool.Arrays;

@Module.Declaration(name = "AutoDupe5b", category = Category.Exploits)
public class AutoDupe5b extends Module {

    /*
    Need:
     wb on your feet
    1 hopper around the wb
    1 pick
    1 shulker
    1 wood
     */

    BooleanSetting hopperCheck = registerBoolean("Hopper Check", true);
    IntegerSetting itemCrafting = registerInteger("Item Crafting", 15, 0, 100);
    IntegerSetting maxStackWait = registerInteger("Max Stack Wait", 20, 0, 100);
    IntegerSetting waitPlace = registerInteger("Wait Place", 20, 0, 100);

    Vec3d lastHitVec = null;
    BlockPos shulkerPos, wbPos;
    int slotPick, slotShulk, stage, slotWood;
    int tickPutItem;
    boolean beforePlaced;

    @EventHandler
    private final Listener<OnUpdateWalkingPlayerEvent> onUpdateWalkingPlayerEventListener = new Listener<>(event -> {
        if (event.getPhase() != Phase.PRE || lastHitVec == null)
            return;
        PlayerPacketManager.INSTANCE.addPacket(new PlayerPacket(this, new Vec2f(0, -90)));
    });


    @Override
    public void onEnable() {
        if (mc.world == null || mc.player == null) {
            disable();
            return;
        }
        initValues();

    }

    private void initValues() {
        /*
        mc.playerController.windowClick(mc.player.openContainer.windowId, 0, 0, ClickType.QUICK_MOVE, mc.player);
                        mc.playerController.updateController();
         */
        // Check for the crafting table
        wbPos = new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ).add(.5, -1, .5);


        // Check for the hopper
        shulkerPos = null;
        for (Vec3d surround : new Vec3d[]{
                new Vec3d(1, 1, 0),
                new Vec3d(-1, 1, 0),
                new Vec3d(0, 1, 1),
                new Vec3d(0, 1, -1)
        }) {
            if (hopperCheck.getValue()) {
                BlockPos pos = new BlockPos(mc.player.posX + surround.x, mc.player.posY - 2, mc.player.posZ + surround.z);
                if (BlockUtil.getBlock(pos) instanceof BlockHopper) {
                    shulkerPos = new BlockPos(mc.player.posX + surround.x, mc.player.posY, mc.player.posZ + surround.z);;
                    break;
                } // 648 4 163
            } else {
                BlockPos pos = new BlockPos(mc.player.posX + surround.x, mc.player.posY, mc.player.posZ + surround.z);
                if (BlockUtil.getBlock(pos) instanceof BlockAir) {
                    shulkerPos = pos;
                }

            }
        }
        if (shulkerPos == null) {
            disable();
            return;
        }

        // Check pickaxe
        slotPick = InventoryUtil.findFirstItemSlot(Items.DIAMOND_PICKAXE.getClass(), 0, 8);
        if (slotPick == -1) {
            disable();
            return;
        }

        // Check wood
        slotWood = InventoryUtil.findFirstBlockSlot(Blocks.PLANKS.getClass(), 0, 35);

        if (slotWood == -1) {
            disable();
            return;
        }

        // Check shulker
        slotShulk = InventoryUtil.findFirstShulker(0, 8);
        if (slotShulk == -1) {
            disable();
            return;
        }

        //lastHitVec = new Vec3d(shulkerPos);
        //lastHitVec = new Vec3d(wbPos);

        stage = 0;

        if (mc.player.inventory.currentItem != slotPick)
            mc.player.inventory.currentItem = slotPick;

    }

    @Override
    public void onDisable() {

    }

    @Override
    public void onUpdate() {

        /*
        Stages:
        0 -> Drop item + open wb
        1 -> when wb is open -> Send button craft
        2 -> When we have > 1 stack shulker -> close wb
        3 -> Break the block when it appears
         */

        switch(stage) {
            case 0:
                rotate(wbPos);
                if (mc.player.inventory.getStackInSlot(slotShulk + 36).isEmpty()) {
                    slotShulk = InventoryUtil.findFirstShulker(0, 8);
                    if (slotShulk == -1) {
                        disable();
                        return;
                    }
                }
                mc.playerController.windowClick(0, slotShulk + 36, 0, ClickType.THROW, mc.player);
                if (mc.player.isSneaking())
                    mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
                mc.playerController.processRightClickBlock(mc.player, mc.world, wbPos, EnumFacing.UP, new Vec3d(wbPos), EnumHand.MAIN_HAND);
                if (mc.player.isSneaking())
                    mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING));
                stage = 1;
                tickPutItem = 0;

                break;
            case 1:
                if (mc.currentScreen instanceof GuiCrafting) {
                    if (tickPutItem++ >= itemCrafting.getValue()) {
                        mc.playerController.windowClick(mc.player.openContainer.windowId, slotWood < 9 ? slotWood + 37 : slotWood + 1, 1, ClickType.PICKUP, mc.player);
                        mc.playerController.windowClick(mc.player.openContainer.windowId, 1, 0, ClickType.PICKUP, mc.player);
                        mc.playerController.updateController();
                        stage = 2;
                        tickPutItem = 0;
                    }
                }
                break;
            case 2:
                beforePlaced = false;
                for(int i = 0; i < 9; i++)
                    if (mc.player.inventory.getStackInSlot(i).getItem() instanceof ItemBlock
                    && ((ItemBlock) mc.player.inventory.getStackInSlot(i).getItem()).getBlock() instanceof BlockShulkerBox && mc.player.inventory.getStackInSlot(i).getCount() > 1) {
                        mc.player.closeScreen();
                        mc.player.inventory.currentItem = i;
                        if (!mc.player.isSneaking())
                            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING));
                        PlacementUtil.place(shulkerPos, EnumHand.MAIN_HAND, false);
                        if (!mc.player.isSneaking())
                            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
                        stage = 3;
                        tickPutItem = 0;
                        break;
                    }
                if (tickPutItem++ > maxStackWait.getValue()) {
                    stage = 0;
                    mc.player.closeScreen();
                    tickPutItem = 0;
                }
                break;
            case 3:
                if (BlockUtil.getBlock(shulkerPos) instanceof BlockShulkerBox) {
                    beforePlaced = true;
                    mc.player.inventory.currentItem = slotPick;
                    mc.player.swingArm(EnumHand.MAIN_HAND);
                    mc.playerController.onPlayerDamageBlock(shulkerPos, EnumFacing.UP);
                } else {
                    if (beforePlaced || tickPutItem++ > waitPlace.getValue())
                        stage = 0;
                }
                break;
        }


    }

    void rotate(BlockPos pos) {
        lastHitVec = new Vec3d(pos);
        BlockUtil.faceVectorPacketInstant(lastHitVec, true);
    }

    private void placeBlock(BlockPos pos) {

    }

}
