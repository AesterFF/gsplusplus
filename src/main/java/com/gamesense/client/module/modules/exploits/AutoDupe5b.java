package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.Phase;
import com.gamesense.api.event.events.OnUpdateWalkingPlayerEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.util.player.InventoryUtil;
import com.gamesense.api.util.player.PlacementUtil;
import com.gamesense.api.util.player.PlayerPacket;
import com.gamesense.api.util.player.RotationUtil;
import com.gamesense.api.util.world.BlockUtil;
import com.gamesense.client.manager.managers.PlayerPacketManager;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import com.gamesense.client.module.modules.combat.AntiCrystal;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockHopper;
import net.minecraft.block.BlockObsidian;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec2f;
import net.minecraft.util.math.Vec3d;

@Module.Declaration(name = "AutoDupe5b", category = Category.Exploits)
public class AutoDupe5b extends Module {

    /*
    Need:
     wb on your feet
    1 hopper around the wb
    1 pick
    1 shulker
    1 wood
     */

    BooleanSetting hopperCheck = registerBoolean("Hopper Check", true);

    boolean isWood;
    Vec3d lastHitVec = null;
    BlockPos shulkerPos, wbPos;
    int slotPick, slotShulk, stage;

    @EventHandler
    private final Listener<OnUpdateWalkingPlayerEvent> onUpdateWalkingPlayerEventListener = new Listener<>(event -> {
        if (event.getPhase() != Phase.PRE || lastHitVec == null)
            return;
        Vec2f rotation = RotationUtil.getRotationTo(lastHitVec);
        PlayerPacket packet = new PlayerPacket(this, rotation);
        PlayerPacketManager.INSTANCE.addPacket(packet);
    });


    @Override
    public void onEnable() {
        initValues();
    }

    private void initValues() {
        /*
        mc.playerController.windowClick(mc.player.openContainer.windowId, 0, 0, ClickType.QUICK_MOVE, mc.player);
                        mc.playerController.updateController();
         */
        // Check for the crafting table
        wbPos = null;
        if (BlockUtil.getBlock(mc.player.posX, mc.player.posY - 1, mc.player.posZ) != Blocks.CRAFTING_TABLE) {
            disable();
            return;
        } else wbPos = new BlockPos(mc.player.posX, mc.player.posY - 1, mc.player.posZ);


        // Check for the hopper
        shulkerPos = null;
        for (Vec3d surround : new Vec3d[]{
                new Vec3d(1, 1, 0),
                new Vec3d(-1, 1, 0),
                new Vec3d(0, 1, 1),
                new Vec3d(0, 1, -1)
        }) {
            if (hopperCheck.getValue()) {
                BlockPos pos = new BlockPos(mc.player.posX + surround.x, mc.player.posY - surround.y, mc.player.posZ + surround.z);
                if (BlockUtil.getBlock(pos) == Blocks.HOPPER) {
                    shulkerPos = pos.add(0, 1, 0);
                    break;
                }
            } else {
                BlockPos pos = new BlockPos(mc.player.posX + surround.x, mc.player.posY, mc.player.posZ + surround.z);
                if (BlockUtil.getBlock(pos) instanceof BlockAir) {
                    shulkerPos = pos;
                }

            }
        }
        if (shulkerPos == null) {
            disable();
            return;
        }

        // Check pickaxe
        slotPick = InventoryUtil.findFirstItemSlot(Items.DIAMOND_PICKAXE.getClass(), 0, 8);
        if (slotPick == -1) {
            disable();
            return;
        }

        // Check wood
        int wood = InventoryUtil.findFirstBlockSlot(Blocks.PLANKS.getClass(), 0, 36);

        if (wood == -1) {
            isWood = false;
            disable();
            return;
        }

        // Check shulker
        slotShulk = InventoryUtil.findFirstShulker(0, 8);
        if (slotShulk == -1) {
            disable();
            return;
        }

        //lastHitVec = new Vec3d(shulkerPos);
        //lastHitVec = new Vec3d(wbPos);

    }

    @Override
    public void onDisable() {

    }

    @Override
    public void onUpdate() {

        /*
        Stages:
        0 -> Drop item + open wb
        1 -> when wb is open -> Send button craft
        2 -> When we have > 1 stack shulker -> close wb, place it, break it
        Return to 0 when we have 1 shulker, so it means the server processed it
         */


    }

    private void placeBlock(BlockPos pos) {

    }

}
