package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.events.PlayerMoveEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.world.MotionUtil;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.client.CPacketPlayer;

import java.util.Arrays;

@Module.Declaration(name = "ClipFlight", category = Category.Exploits)
public class ClipFlight extends Module {
    ModeSetting flight = registerMode("Mode", Arrays.asList("Flight", "Clip", "Relative"), "Clip");
    IntegerSetting packets = registerInteger("Packets", 80, 1, 300);
    IntegerSetting speed = registerInteger("XZ Speed", 7, -99, 99);
    IntegerSetting speedY = registerInteger("Y Speed", 7, -99, 99);
    BooleanSetting bypass = registerBoolean("Bypass", false);
    BooleanSetting update = registerBoolean("Update Position Client Side", false);
    IntegerSetting x = registerInteger("X", 0, -99, 99);
    IntegerSetting y = registerInteger("Y", 0, -99, 99);
    IntegerSetting z = registerInteger("Z", 0, -99, 99);

    int num = 0;

    double startFlat = 0;

    public void onEnable() {
        startFlat = mc.player.posY;
        num = 0;
    }

    @EventHandler
    private final Listener<PlayerMoveEvent> playerMoveEventListener = new Listener<>(event -> {

        event.setY(-0.0001);

        double[] dir = MotionUtil.forward(speed.getValue());

        double yposition;

        switch (flight.getValue()) {

            case "Flight":
                double xPos = mc.player.posX;
                double yPos = mc.player.posY;
                double zPos = mc.player.posZ;

                if (mc.gameSettings.keyBindJump.isKeyDown() && !mc.gameSettings.keyBindSneak.isKeyDown())
                    yPos += speedY.getValue();
                else if (mc.gameSettings.keyBindSneak.isKeyDown())
                    yPos -= speedY.getValue();

                xPos += dir[0];
                zPos += dir[1];

                mc.player.connection.sendPacket(new CPacketPlayer.Position(xPos, yPos, zPos, false));
                if (update.getValue())
                    mc.player.setPosition(xPos, yPos, zPos);
                if (bypass.getValue())
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX,mc.player.posY + 0.05, mc.player.posZ, true));

                break;


            case "Clip":

                if (mc.gameSettings.keyBindJump.isKeyDown()) {
                    for (int i = 0; i < packets.getValue(); i++) {

                        yposition = mc.player.posY + speedY.getValue();

                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, yposition, mc.player.posZ, false));
                        if (update.getValue()) mc.player.setPosition(mc.player.posX, yposition, mc.player.posZ);
                        if (bypass.getValue())
                            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX,mc.player.posY + 0.05, mc.player.posZ, true));

                        }
                    }


                break;
            case "Relative":

                for (int i = 0; i < packets.getValue(); i++) {

                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + x.getValue(), mc.player.posY + y.getValue(), mc.player.posZ + z.getValue(), false));
                    if (update.getValue()) {
                        mc.player.setPosition(mc.player.posX + x.getValue(), mc.player.posY + y.getValue(), mc.player.posZ + z.getValue());
                    }
                    if (bypass.getValue())
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX,mc.player.posY + 0.05, mc.player.posZ, true));
                }

                break;

        }

    });
}


